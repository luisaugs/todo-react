{"version":3,"sources":["context/GlobalContext.js","components/Input.js","components/ModalDelete.js","components/ModalEdit.js","components/ModalSelector.js","components/NoTodos.js","components/TodoElement.js","components/ResultSearch.js","components/SearchInput.js","components/TodoContainerComplete.js","components/TodoContainerIncomplete.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["GlobalContext","createContext","GlobalProvider","children","useState","todos","setTodos","todosTemp","setTodosTemp","completed","setCompleted","incompleted","setIncompleted","modalDelete","setModalDelete","idFromTodo","setIdFromTodo","modSelector","setModSelector","searching","setSearching","modalEdit","setModalEdit","bodyFromTodo","setBodyFromTodo","closeModalEdit","checkIncompletedTodo","some","todo","checkCompletedTodo","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","values","addTodo","old","removeTodo","id","prev","filter","checkCompleted","map","item","checkColor","priority","searchTodo","text","clearTimeout","setTimeout","body","toLowerCase","includes","openModalDelete","closeModalDelete","openModalPriority","closeModalPriority","openModalEdit","returnTodo","editTodo","Provider","value","Input","setBody","useContext","className","onSubmit","e","preventDefault","trim","Date","now","placeholder","autoFocus","type","onChange","target","ModalDelete","onClick","ModalEdit","newBody","setNewBody","ref","useRef","current","select","dataset","close","handleClick","data-close","inputArea","defaultValue","name","disabled","ModalSelector","NoTodos","TodoElement","isChecked","setIsChecked","high","medium","low","checked","closeModalSelector","ResultSearch","SearchInput","TodoContainerComplete","reverse","TodoContainerIncomplete","App","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"iXAEaA,EAAgBC,0BAEd,SAASC,EAAT,GAAuC,IAAbC,EAAY,EAAZA,SAAY,EAEvBC,mBAAS,IAFc,mBAE1CC,EAF0C,KAEnCC,EAFmC,OAGfF,mBAAS,IAHM,mBAG1CG,EAH0C,KAG/BC,EAH+B,OAIfJ,oBAAS,GAJM,mBAI1CK,EAJ0C,KAI/BC,EAJ+B,OAKXN,oBAAS,GALE,mBAK1CO,EAL0C,KAK7BC,EAL6B,OAMXR,oBAAS,GANE,mBAM1CS,EAN0C,KAM7BC,EAN6B,OAObV,mBAAS,MAPI,mBAO1CW,EAP0C,KAO9BC,EAP8B,OAQXZ,oBAAS,GARE,mBAQ1Ca,EAR0C,KAQ7BC,EAR6B,OASfd,oBAAS,GATM,mBAS1Ce,EAT0C,KAS/BC,EAT+B,OAUfhB,oBAAS,GAVM,mBAU1CiB,EAV0C,KAU/BC,EAV+B,OAWTlB,mBAAS,IAXA,mBAW1CmB,EAX0C,KAW5BC,EAX4B,KAuF3CC,EAAiB,WACnBH,GAAa,IAIXI,EAAuB,SAACrB,GAC1B,OACIA,EAAMsB,MAAK,SAAAC,GACP,OAAuB,IAAnBA,EAAKnB,cASfoB,EAAqB,SAACxB,GACxB,OACIA,EAAMsB,MAAK,SAAAC,GACP,OAAuB,IAAnBA,EAAKnB,cASrBqB,qBAAU,WACFC,aAAaC,QAAQ,WACrB1B,EAAS2B,KAAKC,MAAMH,aAAaC,QAAQ,WACzCpB,EAAec,EAAqBrB,IACpCK,EAAamB,EAAmBxB,OAGrC,IAEHyB,qBAAU,WACNC,aAAaI,QAAQ,QAASF,KAAKG,UAAU/B,IAC7CO,EAAec,EAAqBrB,IACpCK,EAAamB,EAAmBxB,MACjC,CAACA,EAAOE,EAAWY,IAGtB,IAAMkB,EAAS,CACXhC,QACAC,WACAgC,QAzHY,SAACV,GACbtB,GAAS,SAACiC,GAAD,4BAAaA,GAAb,CAAkBX,QAyH3BY,WArHe,SAACC,GAChBnC,GAAS,SAACoC,GAAD,OAAUA,EAAKC,QAAO,SAACf,GAAD,OAAUA,EAAKa,KAAOA,QACrD3B,GAAe,IAoHf8B,eAhHmB,SAACH,GACpBnC,EAASD,EAAMwC,KAAI,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,EAAZ,2BAAsBK,GAAtB,IAA4BrC,WAAYqC,EAAKrC,YAAcqC,MACtFpC,GAAa,IA+GbqC,WA3Ge,SAACN,EAAIO,GACpB1C,EAASD,EAAMwC,KAAI,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,EAAZ,2BAAsBK,GAAtB,IAA4BE,aAAaF,OA2GpEG,WA3Fe,SAACC,GACZA,GACA9B,GAAa,GACb+B,eACAC,YAAW,WACP5C,EAAaH,EAAMsC,QAAO,SAAAf,GAAI,OAAIA,EAAKyB,KAAKC,cAAcC,SAASL,EAAKI,qBACzE,MAEHlC,GAAa,IAoFjBb,YACAE,YACAE,cACA6C,gBAlFoB,SAACf,GACrB3B,GAAe,GACfE,EAAcyB,IAiFdgB,iBA9EqB,WACrB3C,GAAe,IA8EfD,cACAE,aACA2C,kBA5EsB,SAACjB,GACvBvB,GAAe,GACfF,EAAcyB,IA2EdkB,mBAxEuB,WACvBzC,GAAe,IAwEfD,cACAE,YACAM,iBACAmC,cAvEkB,SAACnB,GACnBnB,GAAa,GAvCE,SAACmB,GAChBjB,EAAgBnB,EAAMsC,QAAO,SAAAf,GAAI,OAAKA,EAAKa,KAAOA,MAuClDoB,CAAWpB,GACXzB,EAAcyB,IAqEdpB,YACAE,eACAuC,SAvHa,SAACrB,EAAIS,GAClB5C,EAASD,EAAMwC,KAAI,SAAAC,GAAI,OAAIA,EAAKL,KAAOA,EAAZ,2BAAsBK,GAAtB,IAA4BO,KAAMH,IAAQJ,MACrE5B,GAAe,GACfO,MAuHJ,OACI,cAACzB,EAAc+D,SAAf,CAAwBC,MAAO3B,EAA/B,SACKlC,I,UChHE8D,EA/CD,WAAO,IAAD,EAEQ7D,mBAAS,IAFjB,mBAETiD,EAFS,KAEHa,EAFG,KAGR5B,EAAY6B,qBAAWnE,GAAvBsC,QAsBR,OACI,qBAAK8B,UAAU,uBAAf,SACI,uBAAMC,SAtBO,SAACC,GAClBA,EAAEC,iBAEGlB,EAAKmB,SAIVlC,EAAQ,CACJG,GAAIgC,KAAKC,MACTrB,KAAMA,EAAKmB,OAEXxB,SAAU,OACVvC,WAAW,IAGfyD,EAAQ,MAOJ,UACI,uBACIE,UAAU,aACVO,YAAY,OACZC,WAAS,EACTC,KAAK,OACLb,MAAOX,EACPyB,SAAU,SAACR,GAAD,OAAOJ,EAAQI,EAAES,OAAOf,UAEtC,wBACII,UAAU,aACVS,KAAK,SAFT,yBCTDG,G,MA5BK,WAAO,IAAD,EAE+Bb,qBAAWnE,GAAxDwC,EAFc,EAEdA,WAAYzB,EAFE,EAEFA,WAAY0C,EAFV,EAEUA,iBAEhC,OACI,qBAAKW,UAAU,iBAAf,SACI,sBAAKA,UAAU,aAAf,UACI,oBAAIA,UAAU,mBAAd,wDACA,sBAAKA,UAAU,aAAf,UACI,wBACIA,UAAU,aACVa,QAASxB,EACTmB,WAAS,EAHb,oBAOA,wBACIR,UAAU,aACVa,QAAS,kBAAMzC,EAAWzB,IAF9B,8B,QCmDLmE,G,MAjEG,WAAO,IAAD,EAE2Cf,qBAAWnE,GAAlEe,EAFY,EAEZA,WAAY+C,EAFA,EAEAA,SAAUvC,EAFV,EAEUA,aAAcE,EAFxB,EAEwBA,eAFxB,EAGUrB,mBAAS,IAHnB,mBAGb+E,EAHa,KAGJC,EAHI,KAIdC,EAAMC,mBAqBZ,OAJAxD,qBAAU,WACNuD,EAAIE,QAAQC,WACb,IAGC,qBACIpB,UAAU,kBACVa,QAAS,SAACX,IAtBE,SAACA,GAEc,eAA3BA,EAAES,OAAOU,QAAQC,OACjBjE,IAmBgBkE,CAAYrB,IAC5BsB,aAAW,aAHf,SAKI,qBAAKxB,UAAU,uBAAf,SACI,uBAAMA,UAAU,YAAYC,SAlBnB,SAAAC,GACjBA,EAAEC,iBACGD,EAAES,OAAOc,UAAU7B,MAAMQ,QAE9BV,EAAS/C,EAAYoE,IAcb,UACI,0BACIE,IAAKA,EACLjB,UAAU,iBACV0B,aAAY,UAAKvE,EAAa,GAAG8B,MACjC0C,KAAK,YACLjB,SAAU,SAAAR,GAAC,OAAIc,EAAWd,EAAES,OAAOf,MAAMQ,SACzCI,WAAS,KAGXO,GACE,wBACIf,UAAU,gBACV4B,UAAQ,EAFZ,0BAOHb,GACG,wBACIf,UAAU,gBACVS,KAAK,SAFT,mCCjBToB,G,MAnCO,WAAO,IAAD,EAG+B9B,qBAAWnE,GAA1D+C,EAHgB,EAGhBA,WAAYY,EAHI,EAGJA,mBAAoB5C,EAHhB,EAGgBA,WAGxC,OACI,qBAAKqD,UAAU,sBAAsBa,QAAStB,EAA9C,SACI,sBAAKS,UAAU,qBAAf,UACI,oBAAIA,UAAU,iBAAd,6CACA,sBAAKA,UAAU,qBAAf,UACI,wBACIA,UAAU,wBACVa,QAAS,kBAAMlC,EAAWhC,EAAY,SAF1C,kBAMA,wBACIqD,UAAU,uBACVa,QAAS,kBAAMlC,EAAWhC,EAAY,WAF1C,oBAMA,wBACIqD,UAAU,uBACVa,QAAS,kBAAIlC,EAAWhC,EAAW,QAFvC,2BCjBLmF,G,MATC,WACZ,OACI,sBAAK9B,UAAU,eAAf,UACI,kDACA,+C,eC6DG+B,G,MA3DK,SAAC,GAAuC,IAArC1D,EAAoC,EAApCA,GAAIY,EAAgC,EAAhCA,KAAML,EAA0B,EAA1BA,SAAUvC,EAAgB,EAAhBA,UAAgB,EAGrBL,oBAAS,GAHY,mBAGhDgG,EAHgD,KAGrCC,EAHqC,OAIjBjG,oBAAS,GAJQ,mBAIhDa,EAJgD,KAInCC,EAJmC,OAKuBiD,qBAAWnE,GAAjF4C,EAL+C,EAK/CA,eAAgBY,EAL+B,EAK/BA,gBAAiBE,EALc,EAKdA,kBAAmBE,EALL,EAKKA,cAa5D,OACI,qCACI,qBAAKQ,UAAU,OAAf,SACI,sBAAKA,UAAS,yBAAoB3D,EAAY,WAAa,IAA3D,UACI,qBACI2D,UAAS,uBAXV,CACfkC,KAAM,eACNC,OAAQ,gBACRC,IAAK,kBAQiDxD,IACtCiC,QAAS,kBAAIvB,EAAkBjB,MAEnC,8BACI,uBACI2B,UAAU,WACVS,KAAK,WACL4B,QAAShG,EACTqE,SAxBD,WACnBuB,GAAcD,GACdxD,EAAeH,QAyBH,qBACI2B,UAAU,SACVa,QAAS,kBAAIrB,EAAcnB,IAF/B,SAIKY,IACL,qBACIe,UAAU,cACVa,QAAS,kBAAIzB,EAAgBf,IAFjC,SAII,cAAC,IAAD,CAAG2B,UAAU,SAtBiD3B,KA2BzExB,GACG,cAAC,EAAD,CACIyF,mBAAoB,kBAAMxF,GAAe,IACzCuB,GAAIA,SCnCTkE,EAnBM,WAAO,IAEhBpG,EAAc4D,qBAAWnE,GAAzBO,UAER,OACI,qBAAK6D,UAAU,qBAAf,SACI,2BAAUA,UAAU,WAApB,UACI,6CAEC7D,GAAaA,EAAUsC,KAAI,SAAAjB,GAAI,OAC5B,cAAC,EAAD,eAA+BA,GAAbA,EAAKa,a,QCY5BmE,G,MAtBK,WAAO,IAEf3D,EAAekB,qBAAWnE,GAA1BiD,WAER,OACI,sBAAKmB,UAAU,yBAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,cAAC,IAAD,MAEJ,sBAAMA,UAAU,aAAaC,SAAU,SAAAC,GAAC,OAAKA,EAAEC,kBAA/C,SACI,uBACIH,UAAU,eACVO,YAAY,YACZoB,KAAK,WACLlB,KAAK,OACLC,SAAU,SAAAR,GAAMrB,EAAWqB,EAAES,OAAOf,iBCEzC6C,EAjBe,WAAO,IAEzBxG,EAAU8D,qBAAWnE,GAArBK,MAER,OACI,qBAAK+D,UAAU,qBAAf,SACI,2BAAUA,UAAU,WAApB,UACI,+CACC/D,GAASA,EAAMsC,QAAO,SAAAf,GAAI,OAAIA,EAAKnB,aAAWqG,UAAUjE,KAAI,SAAAjB,GAAI,OAC7D,cAAC,EAAD,eAA+BA,GAAbA,EAAKa,aCS5BsE,EAjBiB,WAAO,IAE3B1G,EAAU8D,qBAAWnE,GAArBK,MAER,OACI,qBAAK+D,UAAU,qBAAf,SACI,2BAAUA,UAAU,WAApB,UACI,iDACC/D,GAASA,EAAMsC,QAAO,SAAAf,GAAI,OAAKA,EAAKnB,aAAWqG,UAAUjE,KAAI,SAAAjB,GAAI,OAC9D,cAAC,EAAD,eAA+BA,GAAbA,EAAKa,aC8C5BuE,MAhDf,WAAgB,IAAD,EAGyH7C,qBAAWnE,GAAzIK,EAHK,EAGLA,MAAOI,EAHF,EAGEA,UAAWE,EAHb,EAGaA,YAAaE,EAH1B,EAG0BA,YAAaC,EAHvC,EAGuCA,eAAgBC,EAHvD,EAGuDA,WAAYE,EAHnE,EAGmEA,YAAaE,EAHhF,EAGgFA,UAAWE,EAH3F,EAG2FA,UAAWI,EAHtG,EAGsGA,eAEnH,OACE,sBAAK2C,UAAU,MAAf,UACE,sCAKA,cAAC,EAAD,IAGC/C,GACC,cAAC,EAAD,CACEI,eAAgBA,IAKF,IAAjBpB,EAAM4G,QAAgB,cAAC,EAAD,IAGtB5G,EAAM4G,OAAS,GAAK,cAAC,EAAD,IAGpB9F,GAAa,cAAC,EAAD,KAGZA,GAAaR,GAAe,cAAC,EAAD,KAC5BQ,GAAaV,GAAa,cAAC,EAAD,IAG3BI,GACC,cAAC,EAAD,CACE4C,iBAAkB,kBAAM3C,GAAe,IACvC2B,GAAI1B,IAKPE,GAAe,cAAC,EAAD,QC5ChBiG,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,MAAK,SAACC,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBC,QAAQC,IACJ,+GAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAMpBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WAOxCW,OAAM,SAACC,GACJL,QAAQK,MAAM,4CAA6CA,MCvFvEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC5I,EAAD,UACE,cAAC,EAAD,QAGJ6I,SAASC,eAAe,SDOnB,SAAkBtB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIsB,IAAIC,GAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIrC,OAGJhC,OAAOiC,iBAAiB,QAAQ,WAC5B,IAAM5B,EAAK,UAAMyB,GAAN,sBAEPhC,IAgEhB,SAAiCO,EAAOC,GAEpC4B,MAAM7B,EAAO,CACT8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAC0B,GAEH,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAACC,GAChCA,EAAa+B,aAAahC,MAAK,WAC3BV,OAAOC,SAAS0C,eAKxBvC,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IAAI,oEAtFRyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WAC/BQ,QAAQC,IACJ,+GAMRf,EAAgBC,EAAOC,OC/BvCuC,K","file":"static/js/main.13d9e576.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react'\r\n\r\nexport const GlobalContext = createContext()\r\n\r\nexport default function GlobalProvider({ children }) {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n    const [todosTemp, setTodosTemp] = useState([]);\r\n    const [completed, setCompleted] = useState(false);\r\n    const [incompleted, setIncompleted] = useState(false);\r\n    const [modalDelete, setModalDelete] = useState(false);\r\n    const [idFromTodo, setIdFromTodo] = useState(null);\r\n    const [modSelector, setModSelector] = useState(false);\r\n    const [searching, setSearching] = useState(false);\r\n    const [modalEdit, setModalEdit] = useState(false);\r\n    const [bodyFromTodo, setBodyFromTodo] = useState([]);\r\n\r\n    //add todo to array\r\n    const addTodo = (todo) => {\r\n        setTodos((old) => [...old, todo])\r\n    }\r\n\r\n    //remove todo from array\r\n    const removeTodo = (id) => {\r\n        setTodos((prev) => prev.filter((todo) => todo.id !== id))\r\n        setModalDelete(false)\r\n    }\r\n\r\n    //set checked a todo\r\n    const checkCompleted = (id) => {\r\n        setTodos(todos.map(item => item.id === id ? { ...item, completed: !item.completed } : item))\r\n        setCompleted(true)\r\n    }\r\n\r\n    //set priority color\r\n    const checkColor = (id, priority) => {\r\n        setTodos(todos.map(item => item.id === id ? { ...item, priority } : item))\r\n    }\r\n\r\n    //edit todo\r\n    const editTodo = (id, text) => {\r\n        setTodos(todos.map(item => item.id === id ? { ...item, body: text} : item))\r\n        setModSelector(false)\r\n        closeModalEdit()\r\n    }\r\n\r\n    //return todo\r\n    const returnTodo = (id) => {\r\n        setBodyFromTodo(todos.filter(todo =>  todo.id === id ));\r\n    }\r\n\r\n    //search todo\r\n    const searchTodo = (text) => {\r\n        if (text) {\r\n            setSearching(true)\r\n            clearTimeout()\r\n            setTimeout(() => {\r\n                setTodosTemp(todos.filter(todo => todo.body.toLowerCase().includes(text.toLowerCase())))\r\n            }, 250)\r\n        } else {\r\n            setSearching(false)\r\n        }\r\n    }\r\n\r\n    //modal delete\r\n    const openModalDelete = (id) => {\r\n        setModalDelete(true)\r\n        setIdFromTodo(id)\r\n    }\r\n\r\n    const closeModalDelete = () => {\r\n        setModalDelete(false)\r\n    }\r\n\r\n    //modal priority\r\n    const openModalPriority = (id) => {\r\n        setModSelector(true)\r\n        setIdFromTodo(id)\r\n    }\r\n\r\n    const closeModalPriority = () => {\r\n        setModSelector(false)\r\n    }\r\n\r\n    //modal edit\r\n    const openModalEdit = (id) => {\r\n        setModalEdit(true)\r\n        returnTodo(id)\r\n        setIdFromTodo(id)\r\n    }\r\n\r\n    const closeModalEdit = () => {\r\n        setModalEdit(false)\r\n    }\r\n\r\n    // verify state todo\r\n    const checkIncompletedTodo = (todos) => {\r\n        return (\r\n            todos.some(todo => {\r\n                if (todo.completed === false) {\r\n                    return true\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    const checkCompletedTodo = (todos) => {\r\n        return (\r\n            todos.some(todo => {\r\n                if (todo.completed === true) {\r\n                    return true\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('todos')) {\r\n            setTodos(JSON.parse(localStorage.getItem('todos')))\r\n            setIncompleted(checkIncompletedTodo(todos))\r\n            setCompleted(checkCompletedTodo(todos))\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos))\r\n        setIncompleted(checkIncompletedTodo(todos))\r\n        setCompleted(checkCompletedTodo(todos))\r\n    }, [todos, todosTemp, searching])\r\n\r\n\r\n    const values = {\r\n        todos,\r\n        setTodos,\r\n        addTodo,\r\n        removeTodo,\r\n        checkCompleted,\r\n        checkColor,\r\n        searchTodo,\r\n        todosTemp,\r\n        completed,\r\n        incompleted,\r\n        openModalDelete,\r\n        closeModalDelete,\r\n        modalDelete,\r\n        idFromTodo,\r\n        openModalPriority,\r\n        closeModalPriority,\r\n        modSelector,\r\n        searching,\r\n        closeModalEdit,\r\n        openModalEdit,\r\n        modalEdit,\r\n        bodyFromTodo, \r\n        editTodo\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={values}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n","import { useContext, useState } from 'react';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport './Input.css';\r\n\r\n\r\nconst Input = () => {\r\n\r\n    const [body, setBody] = useState(\"\");\r\n    const { addTodo } = useContext(GlobalContext);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (!body.trim()) {\r\n            return\r\n        }\r\n\r\n        addTodo({\r\n            id: Date.now(),\r\n            body: body.trim(),\r\n            // priority: p[parseInt(Math.random() * 3)],\r\n            priority: \"high\",\r\n            completed: false\r\n        })\r\n\r\n        setBody(\"\")\r\n    }\r\n\r\n    // const p = [\"high\", \"low\", \"medium\"]\r\n\r\n    return (\r\n        <div className=\"text-input-container\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    className=\"text-input\"\r\n                    placeholder=\"todo\"\r\n                    autoFocus\r\n                    type=\"text\"\r\n                    value={body}\r\n                    onChange={(e) => setBody(e.target.value)}\r\n                />\r\n                <button\r\n                    className=\"btn-submit\"\r\n                    type=\"submit\"\r\n                >\r\n                    Save!\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","import { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport './MsgAlert.css';\r\n\r\nconst ModalDelete = () => {\r\n\r\n    const { removeTodo, idFromTodo, closeModalDelete } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"msg-alert-main\">\r\n            <div className=\"alert-card\">\r\n                <h3 className=\"alert-card-title\">Are you sure you want to delete this todo?</h3>\r\n                <div className=\"order-btns\">\r\n                    <button\r\n                        className=\"cancel-btn\"\r\n                        onClick={closeModalDelete}\r\n                        autoFocus\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        className=\"delete-btn\"\r\n                        onClick={() => removeTodo(idFromTodo)}\r\n                    >\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalDelete;","import { useContext, useEffect, useRef } from 'react';\r\nimport { useState } from 'react/cjs/react.development';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport './ModalEdit.css';\r\n\r\n\r\nconst ModalEdit = () => {\r\n\r\n    const { idFromTodo, editTodo, bodyFromTodo, closeModalEdit } = useContext(GlobalContext);\r\n    const [newBody, setNewBody] = useState('');\r\n    const ref = useRef();\r\n\r\n    const handleClick = (e) => {\r\n\r\n        if (e.target.dataset.close === \"closeModal\") {\r\n            closeModalEdit();\r\n        }\r\n    }\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (!e.target.inputArea.value.trim()) return\r\n\r\n        editTodo(idFromTodo, newBody)\r\n    }\r\n\r\n    useEffect(() => {\r\n        ref.current.select();\r\n    }, []);\r\n\r\n    return (\r\n        <div \r\n            className=\"main-modal-edit\" \r\n            onClick={(e)=> {handleClick(e)}}\r\n            data-close=\"closeModal\"\r\n        >\r\n            <div className=\"modal-edit-container\">\r\n                <form className=\"form-edit\" onSubmit={handleSubmit}>\r\n                    <textarea\r\n                        ref={ref}\r\n                        className=\"edit-text-area\"\r\n                        defaultValue={`${bodyFromTodo[0].body}`}\r\n                        name=\"inputArea\"\r\n                        onChange={e => setNewBody(e.target.value.trim())}\r\n                        autoFocus\r\n                    >\r\n                    </textarea>\r\n                    {!newBody &&\r\n                        <button\r\n                            className=\"edit-text-dis\" \r\n                            disabled\r\n                        >\r\n                            Save changes\r\n                        </button>\r\n                    }\r\n                    {newBody &&\r\n                        <button\r\n                            className=\"edit-text-btn\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Save changes\r\n                        </button>\r\n                    }\r\n\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalEdit\r\n","import { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport './ModalSelector.css';\r\n\r\n\r\nconst ModalSelector = () => {\r\n\r\n\r\n    const { checkColor, closeModalPriority, idFromTodo } = useContext(GlobalContext);\r\n\r\n\r\n    return (\r\n        <div className=\"main-modal-selector\" onClick={closeModalPriority}>\r\n            <div className=\"main-card-selector\">\r\n                <h2 className=\"selector-title\">Select the priority of the todo</h2>\r\n                <div className=\"btn-container cont\">\r\n                    <button\r\n                        className=\"btn btn-priority-high\"\r\n                        onClick={() => checkColor(idFromTodo, \"high\")}\r\n                    >\r\n                        HIGH\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-priority-med\"\r\n                        onClick={() => checkColor(idFromTodo, \"medium\")}\r\n                    >\r\n                        MEDIUM\r\n                    </button>\r\n                    <button\r\n                        className=\"btn btn-priority-low\"\r\n                        onClick={()=>checkColor(idFromTodo,\"low\")}\r\n                    >\r\n                        LOW\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModalSelector\r\n","import './NoTodos.css';\r\n\r\nconst NoTodos = () => {\r\n    return (\r\n        <div className=\"card-no-todo\">\r\n            <h2>No Todos to show</h2>\r\n            <p>Make one!</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoTodos;\r\n","import { useContext, useState } from 'react';\r\nimport { X } from 'react-bootstrap-icons';\r\nimport './TodoElement.css';\r\nimport ModalSelector from './ModalSelector';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\n\r\n\r\n\r\nconst TodoElement = ({ id, body, priority, completed }) => {\r\n\r\n\r\n    const [isChecked, setIsChecked] = useState(false)\r\n    const [modSelector, setModSelector] = useState(false);\r\n    const { checkCompleted, openModalDelete, openModalPriority, openModalEdit } = useContext(GlobalContext);\r\n\r\n    const handleOnChange = () => {\r\n        setIsChecked(!isChecked);\r\n        checkCompleted(id);\r\n    }\r\n\r\n    const priorities = {\r\n        high: \"priority-red\",\r\n        medium: \"priority-blue\",\r\n        low: \"priority-green\"\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <div className={`container-card ${completed ? \"check-on\" : \"\"}`} key={id}>\r\n                    <div\r\n                        className={`priority-btn ${priorities[priority]}`}\r\n                        onClick={()=>openModalPriority(id)}\r\n                    ></div>\r\n                    <div>\r\n                        <input\r\n                            className=\"checkbox\"\r\n                            type=\"checkbox\"\r\n                            checked={completed}\r\n                            onChange={handleOnChange}\r\n                        />\r\n                    </div>\r\n                    <div \r\n                        className=\"p-text\"\r\n                        onClick={()=>openModalEdit(id)}\r\n                    >\r\n                        {body}</div>\r\n                    <div\r\n                        className=\"delete-icon\"\r\n                        onClick={()=>openModalDelete(id)}\r\n                    >\r\n                        <X className=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {modSelector &&\r\n                <ModalSelector\r\n                    closeModalSelector={() => setModSelector(false)}\r\n                    id={id}\r\n                />\r\n            } \r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default TodoElement;\r\n\r\n\r\n","import { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport './TodoContainer.css';\r\nimport TodoElement from './TodoElement';\r\n\r\nconst ResultSearch = () => {\r\n\r\n    const { todosTemp } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"container-fieldset\">\r\n            <fieldset className=\"fieldset\">\r\n                <legend>Results</legend>\r\n\r\n                {todosTemp && todosTemp.map(todo => (\r\n                    <TodoElement key={todo.id} {...todo} />\r\n                ))\r\n                }\r\n\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultSearch;","import { Search } from 'react-bootstrap-icons';\r\nimport { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalContext';\r\nimport './Search.css';\r\n\r\nconst SearchInput = () => {\r\n\r\n    const { searchTodo } = useContext(GlobalContext)\r\n  \r\n    return (\r\n        <div className=\"search-input-container\">\r\n            <div className=\"icon-container\">\r\n                <Search />\r\n            </div>\r\n            <form className=\"form-input\" onSubmit={e =>  e.preventDefault() }>\r\n                <input\r\n                    className=\"search-input\"\r\n                    placeholder=\"search...\"\r\n                    name=\"searcher\"\r\n                    type=\"text\"\r\n                    onChange={e => {searchTodo(e.target.value)}}\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInput;","import { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport './TodoContainer.css';\r\nimport TodoElement from './TodoElement';\r\n\r\nconst TodoContainerComplete = () => {\r\n\r\n    const { todos } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"container-fieldset\">\r\n            <fieldset className=\"fieldset\">\r\n                <legend>Completed</legend>\r\n                {todos && todos.filter(todo => todo.completed).reverse().map(todo => (\r\n                    <TodoElement key={todo.id} {...todo} />\r\n                ))\r\n                }\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoContainerComplete;","import { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalContext\";\r\nimport './TodoContainer.css';\r\nimport TodoElement from './TodoElement';\r\n// import { motion } from \"framer-motion\"\r\n\r\nconst TodoContainerIncomplete = () => {\r\n\r\n    const { todos } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"container-fieldset\">\r\n            <fieldset className=\"fieldset\">\r\n                <legend>Incompleted</legend>\r\n                {todos && todos.filter(todo => !todo.completed).reverse().map(todo => (\r\n                    <TodoElement key={todo.id} {...todo} />\r\n                ))\r\n                }\r\n            </fieldset>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoContainerIncomplete;","import { useContext } from 'react';\r\n\r\nimport Input from './components/Input';\r\nimport ModalDelete from './components/ModalDelete';\r\nimport ModalEdit from './components/ModalEdit';\r\nimport ModalSelector from './components/ModalSelector';\r\nimport NoTodos from './components/NoTodos';\r\nimport ResultSearch from './components/ResultSearch';\r\nimport SearchInput from './components/SearchInput';\r\nimport TodoContainerComplete from './components/TodoContainerComplete';\r\nimport TodoContainerIncomplete from './components/TodoContainerIncomplete';\r\nimport { GlobalContext } from './context/GlobalContext';\r\n\r\nfunction App() {\r\n\r\n\r\n  const { todos, completed, incompleted, modalDelete, setModalDelete, idFromTodo, modSelector, searching, modalEdit, closeModalEdit } = useContext(GlobalContext)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>\r\n        todo\r\n      </h1>\r\n\r\n      {/* todo input */}\r\n      <Input />\r\n\r\n      {/* Modal edit */}\r\n      {modalEdit && \r\n        <ModalEdit\r\n          closeModalEdit={closeModalEdit}\r\n        />\r\n      }\r\n      \r\n      {/* todo advice */}\r\n      {todos.length === 0 && <NoTodos />}\r\n\r\n      {/* todo search input box */}\r\n      {todos.length > 5 && <SearchInput />}\r\n\r\n      {/* todo filtered */}\r\n      {searching && <ResultSearch />}\r\n\r\n      {/* todos*/}\r\n      {!searching && incompleted && <TodoContainerIncomplete />}\r\n      {!searching && completed && <TodoContainerComplete />}\r\n\r\n      {/* Modal delete todo */}\r\n      {modalDelete &&\r\n        <ModalDelete\r\n          closeModalDelete={() => setModalDelete(false)}\r\n          id={idFromTodo}\r\n        />\r\n      }\r\n\r\n      {/* Modal priority selector */}\r\n      {modSelector && <ModalSelector />} \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://cra.link/PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://cra.link/PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log('No internet connection found. App is running in offline mode.');\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GlobalProvider from './context/GlobalContext';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalProvider>\r\n      <App />\r\n    </GlobalProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorkerRegistration.register();"],"sourceRoot":""}